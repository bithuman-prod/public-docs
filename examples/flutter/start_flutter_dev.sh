#!/bin/bash

# Flutter Development Startup Script
# This script demonstrates how to run the Flutter app with environment variables

echo "üöÄ Starting Flutter Development Environment"
echo "=========================================="

# Load environment variables from .env file if it exists
if [ -f "frontend/.env" ]; then
    echo "üìÑ Loading environment variables from frontend/.env"
    export $(grep -v '^#' frontend/.env | xargs)
elif [ -f ".env" ]; then
    echo "üìÑ Loading environment variables from .env"
    export $(grep -v '^#' .env | xargs)
fi

# Set configuration for development (read from environment variables or use defaults)
LIVEKIT_SERVER_URL="${LIVEKIT_SERVER_URL}"
LIVEKIT_TOKEN_ENDPOINT="${LIVEKIT_TOKEN_ENDPOINT:-http://localhost:3000/token}"
# LIVEKIT_ROOM_NAME will be auto-generated by Flutter app if not set
LIVEKIT_ROOM_NAME="${LIVEKIT_ROOM_NAME}"
# LIVEKIT_PARTICIPANT_NAME will be auto-generated by Flutter app if not set
LIVEKIT_PARTICIPANT_NAME="${LIVEKIT_PARTICIPANT_NAME}"

echo "üìã Configuration:"
echo "  LIVEKIT_SERVER_URL: $LIVEKIT_SERVER_URL"
echo "  LIVEKIT_TOKEN_ENDPOINT: $LIVEKIT_TOKEN_ENDPOINT"
echo "  LIVEKIT_ROOM_NAME: $LIVEKIT_ROOM_NAME"
echo "  LIVEKIT_PARTICIPANT_NAME: $LIVEKIT_PARTICIPANT_NAME"
echo ""

# Build URL parameters for Flutter Web (URL encode spaces)
URL_PARAMS="serverUrl=${LIVEKIT_SERVER_URL}&tokenEndpoint=${LIVEKIT_TOKEN_ENDPOINT}"
if [ -n "$LIVEKIT_PARTICIPANT_NAME" ]; then
    ENCODED_PARTICIPANT_NAME=$(echo "$LIVEKIT_PARTICIPANT_NAME" | sed 's/ /%20/g')
    URL_PARAMS="${URL_PARAMS}&participant=${ENCODED_PARTICIPANT_NAME}"
fi
if [ -n "$LIVEKIT_ROOM_NAME" ]; then
    URL_PARAMS="${URL_PARAMS}&room=${LIVEKIT_ROOM_NAME}"
fi
echo "üåê Flutter Web URL: http://localhost:8080/?${URL_PARAMS}"
echo ""

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    echo "‚ùå Flutter not found. Please install Flutter first."
    echo "   Run: brew install --cask flutter"
    exit 1
fi

# Navigate to frontend directory
cd frontend

# Check for available devices
echo "üì± Available devices:"
flutter devices
echo ""

# Ask user which platform to run on
echo "Which platform would you like to run on?"
echo "1) Web (Chrome)"
echo "2) Android (if device/emulator available)"
echo "3) iOS (if device/simulator available)"
echo "4) macOS (if available)"
echo ""
read -p "Enter choice (1-4): " choice

# Build dart-define arguments from environment variables
DART_DEFINES=""
if [ -n "$LIVEKIT_SERVER_URL" ]; then
    DART_DEFINES="$DART_DEFINES --dart-define=LIVEKIT_SERVER_URL=$LIVEKIT_SERVER_URL"
fi
if [ -n "$LIVEKIT_TOKEN_ENDPOINT" ]; then
    DART_DEFINES="$DART_DEFINES --dart-define=LIVEKIT_TOKEN_ENDPOINT=$LIVEKIT_TOKEN_ENDPOINT"
fi
if [ -n "$LIVEKIT_ROOM_NAME" ]; then
    DART_DEFINES="$DART_DEFINES --dart-define=LIVEKIT_ROOM_NAME=$LIVEKIT_ROOM_NAME"
fi
# LIVEKIT_PARTICIPANT_NAME is optional - if not set, Flutter will generate a random name like "user-1234"
if [ -n "$LIVEKIT_PARTICIPANT_NAME" ]; then
    DART_DEFINES="$DART_DEFINES --dart-define=LIVEKIT_PARTICIPANT_NAME=\"$LIVEKIT_PARTICIPANT_NAME\""
fi
if [ -n "$LIVEKIT_TOKEN" ]; then
    DART_DEFINES="$DART_DEFINES --dart-define=LIVEKIT_TOKEN=$LIVEKIT_TOKEN"
fi

echo "üîß Dart defines: $DART_DEFINES"
echo ""

case $choice in
    1)
        echo "üåê Starting on Web (Chrome)..."
        echo "üì± Opening browser with URL: http://localhost:8080/?${URL_PARAMS}"
        flutter run -d chrome --web-port 8080 --web-hostname localhost $DART_DEFINES
        ;;
    2)
        echo "üì± Starting on Android..."
        flutter run -d android $DART_DEFINES
        ;;
    3)
        echo "üçé Starting on iOS..."
        flutter run -d ios $DART_DEFINES
        ;;
    4)
        echo "üíª Starting on macOS..."
        flutter run -d macos $DART_DEFINES
        ;;
    *)
        echo "‚ùå Invalid choice. Starting on Web by default..."
        echo "üì± Opening browser with URL: http://localhost:8080/?${URL_PARAMS}"
        flutter run -d chrome --web-port 8080 --web-hostname localhost $DART_DEFINES
        ;;
esac
